//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IContract", CallbackContract=typeof(Client.ServiceReference.IContractCallback))]
    public interface IContract {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/SendMessage")]
        void SendMessage(string msg, int sender_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string msg, int sender_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Connect", ReplyAction="http://tempuri.org/IContract/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Connect", ReplyAction="http://tempuri.org/IContract/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Disconnect", ReplyAction="http://tempuri.org/IContract/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Disconnect", ReplyAction="http://tempuri.org/IContract/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Rename", ReplyAction="http://tempuri.org/IContract/RenameResponse")]
        void Rename(int id, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Rename", ReplyAction="http://tempuri.org/IContract/RenameResponse")]
        System.Threading.Tasks.Task RenameAsync(int id, string newName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/GetUsersCount")]
        void GetUsersCount();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/GetUsersCount")]
        System.Threading.Tasks.Task GetUsersCountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/MessageCallBack")]
        void MessageCallBack(string strMessage, int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/UsersCountCallBack")]
        void UsersCountCallBack(int count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractChannel : Client.ServiceReference.IContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.IContract>, Client.ServiceReference.IContract {
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string msg, int sender_id) {
            base.Channel.SendMessage(msg, sender_id);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string msg, int sender_id) {
            return base.Channel.SendMessageAsync(msg, sender_id);
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void Rename(int id, string newName) {
            base.Channel.Rename(id, newName);
        }
        
        public System.Threading.Tasks.Task RenameAsync(int id, string newName) {
            return base.Channel.RenameAsync(id, newName);
        }
        
        public void GetUsersCount() {
            base.Channel.GetUsersCount();
        }
        
        public System.Threading.Tasks.Task GetUsersCountAsync() {
            return base.Channel.GetUsersCountAsync();
        }
    }
}
